#!/usr/bin/env bash

################################################################################
set -eu
set -o pipefail

################################################################################
function usage() {
  cat <<EOF
Usage: $(basename "$0") [options] name

SSH to the virtual machine whose name matches the given name, starting
it if necessary.  The name argument is a regular expression.

  -h      This message

EOF
}

################################################################################
# Return the name of a virtual machine that matches the given regular
# expression.  The regular expression must match exactly one VM.
function get_vm_full_name() {
  local partial_name=$1
  local names

  mapfile -t names < <(
    virsh list --all --name |
      grep --extended-regexp "$partial_name"
  )

  if [ "${#names[@]}" -ne 1 ]; then
    echo >&2 "ERROR: \`$partial_name' doesn't match exactly one machine:"

    for name in "${names[@]}"; do
      echo >&2 "  - $name"
    done

    exit 1
  fi

  echo "${names[0]}"
}

################################################################################
# Start a VM if it's not already running.
function ensure_vm_is_running() {
  local name=$1
  local state

  state=$(
    virsh dominfo "$name" |
      grep ^State: |
      awk '{print $2}'
  )

  if [ "$state" != running ]; then
    echo "NOTICE: starting VM $name"
    virsh start "$name" >/dev/null
  fi
}

################################################################################
# Return the IP address of the named VM.  May return a blank string if
# the VM does not currently have an IPv4 address.
function get_vm_ip_address() {
  local name=$1

  (virsh domifaddr "$name" 2>/dev/null || echo) |
    (grep ipv4 || :) |
    head -1 |
    awk '{print $4}' |
    cut -d/ -f1
}

################################################################################
# Main entry point.
function main() {
  while getopts "h" o; do
    case "${o}" in
    h)
      usage
      exit
      ;;

    *)
      exit 1
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ $# -ne 1 ]; then
    echo >&2 "ERROR: must give the name of a virtual machine"
    exit 1
  fi

  local partial_name=$1
  local name
  local ip

  name=$(get_vm_full_name "$partial_name")
  ensure_vm_is_running "$name"

  ip=$(get_vm_ip_address "$name")

  while [ -z "$ip" ]; do
    echo "NOTICE: waiting for $name to get an IP address"
    sleep 1
    ip=$(get_vm_ip_address "$name")
  done

  while ! ping -c 1 -W 4 "$ip" >/dev/null; do
    echo "NOTICE: waiting for $name to return a ping"
    sleep 1
  done

  ssh -A "$ip"
}

################################################################################
main "$@"
